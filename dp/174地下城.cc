/*
 * @Author: haha_giraffe
 * @Date: 2020-02-06 12:06:18
 * @Description: 地下城游戏
 * 一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。
骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。
有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。
为了尽快到达公主，骑士决定每次只向右或向下移动一步。 

编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。
例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。

-2 (K)	-3	3
-5	-10	1
10	30	-5 (P) 

说明:

骑士的健康点数没有上限。
任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。

 */

/* 
    解题思路：这题一定可以用dp求解，一开始想从左上往右下遍历，发现无法推出状态转移方程，随后看题解发现只有转换思路，可以从右下往左上推，
    dp[i][j]表示这个点到公主处所需的最低初始健康点数。所以dp[i][j] = min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j].
    除此之外，因为要求，初始点数>0，所以每个都要判断是否小于0。算法时间复杂度O(n^2)，空间复杂度O(n^2)
    dp还可以优化空间复杂度。
*/
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int n = dungeon.size();
        int m = dungeon[0].size();
        vector<vector<int>> dp(n, vector<int>(m, 0));
        dp[n-1][m-1] = dungeon[n-1][m-1] >= 0 ? 1 : -dungeon[n-1][m-1] + 1;
        for(int i = n-2 ; i >= 0; --i){
            dp[i][m-1] = dp[i+1][m-1] - dungeon[i][m-1];
            if(dp[i][m-1] <= 0) dp[i][m-1] = 1;
        }
        for(int j = m-2; j >= 0; --j){
            dp[n-1][j] = dp[n-1][j+1] - dungeon[n-1][j];
            if(dp[n-1][j] <= 0) dp[n-1][j] = 1;
        }
        for(int i = n-2 ; i >= 0; -- i){
            for(int j = m-2; j >= 0; --j){
                dp[i][j] = min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j];
                if(dp[i][j] <= 0) dp[i][j] = 1;
            }
        }
        return dp[0][0];
        
    }
};